(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4038],{79443:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});const a=(0,n(67294).createContext)(void 0)},80944:(t,e,n)=>{"use strict";n.d(e,{Z:()=>o});var a=n(67294),i=n(79443);const o=function(){const t=(0,a.useContext)(i.Z);if(null==t)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return t}},30547:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});var a=n(67294);const i=function(t){let{children:e,hidden:n,className:i}=t;return a.createElement("div",{role:"tabpanel",hidden:n,className:i},e)}},49366:(t,e,n)=>{"use strict";n.d(e,{Z:()=>r});var a=n(67294),i=n(80944),o=n(86010);const r=function(t){const{lazy:e,platform:n,block:r,defaultValue:l,values:s,groupId:u,className:c}=t,d=a.Children.toArray(t.children),p=s??d.map((t=>({value:t.props.value,label:t.props.label}))),h=l??d.find((t=>t.props.default))?.props.value,{tabGroupChoices:m,setTabGroupChoices:g}=(0,i.Z)(),[k,v]=(0,a.useState)(h);(0,a.useEffect)((()=>{if(null!=u){const t=m[u];null!=t&&t!==k&&(p.some((e=>e.value===t))?v(t):v(h))}}),[n,m[u]]);const y=t=>{v(t),null!=u&&g(u,t)},f=p.length>1;return a.createElement("div",{className:"tabs-container"},f&&a.createElement(a.Fragment,null,a.createElement("div",{className:"sm:hidden"},a.createElement("label",{htmlFor:"tabs",className:"sr-only"},"Select a tab"),a.createElement("select",{id:"tabs",name:"tabs",value:k,onChange:t=>y(t.currentTarget.value),className:"block w-full focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"},p.map((t=>{let{value:e,label:n}=t;return a.createElement("option",{value:e,key:e},n??e)})))),a.createElement("div",{className:"hidden sm:block"},a.createElement("nav",{className:"flex space-x-4","aria-label":"Tabs"},p.map((t=>{let{value:e,label:n}=t;return a.createElement("button",{key:e,onClick:()=>y(e),className:(0,o.Z)(k===e?"bg-blue-100 text-blue-700":"text-gray-500 hover:text-gray-700","px-3 py-2 font-medium text-sm rounded-md"),"aria-current":k===e?"page":void 0},n??e)}))))),e?(0,a.cloneElement)(d.filter((t=>t.props.value===k))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},d.map(((t,e)=>(0,a.cloneElement)(t,{key:e,hidden:t.props.value!==k})))))}},46130:(t,e,n)=>{"use strict";n.r(e),n.d(e,{contentTitle:()=>u,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=n(87462),i=(n(67294),n(3905)),o=n(8209),r=n(49366),l=n(30547);const s={title:"Authentication",sidebar_position:2},u=void 0,c={unversionedId:"security/authentication",id:"security/authentication",isDocsHomePage:!1,title:"Authentication",description:'Ditto does not come with an identity provider. Using "Online With Authentication" requires that you have your own identity provider already set up. Each app can use multiple identity providers.',source:"@site/docs/common/security/authentication.mdx",sourceDirName:"security",slug:"/security/authentication",permalink:"/common/security/authentication",editUrl:"https://github.com/getditto/docs/edit/main/docs/common/security/authentication.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Authentication",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Overview",permalink:"/common/security/overview"},next:{title:"Access Control Permissions",permalink:"/common/security/designing-permissions"}},d=[{value:"How it works",id:"how-it-works",children:[],level:2},{value:"API",id:"api",children:[{value:"Creating your client",id:"creating-your-client",children:[],level:3},{value:"Login",id:"login",children:[],level:3},{value:"Logout",id:"logout",children:[],level:3}],level:2},{value:"Tutorial",id:"tutorial",children:[{value:"Server",id:"server",children:[{value:"Incoming POST body",id:"incoming-post-body",children:[],level:4},{value:"Deploy your server",id:"deploy-your-server",children:[],level:4},{value:"Configure your Portal App",id:"configure-your-portal-app",children:[],level:4}],level:3},{value:"Client",id:"client",children:[{value:"Login",id:"login-1",children:[],level:4},{value:"Logout",id:"logout-1",children:[],level:4}],level:3}],level:2}],p={toc:d},h="wrapper";function m(t){let{components:e,...s}=t;return(0,i.kt)(h,(0,a.Z)({},p,s,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Ditto ",(0,i.kt)("strong",{parentName:"p"},"does not come with an identity provider"),'. Using "Online With Authentication" requires that you have your own identity provider already set up. Each app can use multiple identity providers.'),(0,i.kt)("p",null,'The "Online With Authentication" identity type is geared towards apps that will be deployed in real world settings. "Online With Authentication" identity types are: '),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"for apps that need to integrate with existing permissions"),(0,i.kt)("li",{parentName:"ul"},"for apps that need to integrate with existing authentication systems")),(0,i.kt)("h2",{id:"how-it-works"},"How it works"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Devices using Online with Authentication need to connect to the Internet and\nauthenticate at least once before synchronizing with other peers. This is\nrequired so devices can get a valid certificate before going offline.  "))),(0,i.kt)("p",null,'To use the "Online With Authentication" system, your client application is expected to authenticate with your identity system and retrieve some sort of token ',(0,i.kt)("em",{parentName:"p"},"prior")," to syncing with Ditto. Often times this token is some sort of identity token, access token, commonly in the format of a JWT (JSON Web Token)."),(0,i.kt)("p",null,"Once your client application successfully has retrieved this token, it should pass it to the Ditto ",(0,i.kt)("inlineCode",{parentName:"p"},"authenticator")," which will pass it to an authentication webhook. As the developer, you are responsible for writing code and deploying the this webhook to an accessible URL. The authentication webhook will validate and decode the token from the client side and return identity and access control information back to your Ditto instance. "),(0,i.kt)("p",null,"The full flow is detailed in the diagram below:"),(0,i.kt)(o.G,{config:'{"mermaid":{"themeVariables":{"fontFamily":"Helvetica"},"sequence":{"actorFontFamily":"Helvetica","noteFontFamily":"Helvetica","messageFontFamily":"Helvetica"},"journey":{"taskFontFamily":"Helvetica"}}}',chart:"sequenceDiagram\n    Client App->>Your Authentication Mechanism: Send Credentials\n    Your Authentication Mechanism->>Client App: Return JWT\n    Client App->>Ditto Big Peer: JWT\n    Ditto Big Peer->>Auth Webhook: JWT \n    Auth Webhook->>Ditto Big Peer: Formatted Ditto Auth Response\n    Ditto Big Peer->>Client App: Ditto Credentials\n    rect rgba(0, 0, 255, .1)\n      Client App->Ditto Big Peer: Ditto Sync\n    end",mdxType:"Mermaid"}),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"creating-your-client"},"Creating your client"),(0,i.kt)("p",null,"Create the ditto client with the ",(0,i.kt)("inlineCode",{parentName:"p"},"onlineWithAuthentication")," identity. This\nidentity requires an authentication handler ",(0,i.kt)("inlineCode",{parentName:"p"},"authHandler"),"."),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You must refresh the auth token when it expires. You can do that by implementing\n",(0,i.kt)("inlineCode",{parentName:"p"},"authenticationExpiringSoon"),". If you do not implement this, then sync will stop when the token\nexpires. "))),(0,i.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { init, Ditto } from \"@dittolive/ditto\"\n(async () => {\n  await init() // you need to call this at least once before using any of the Ditto API\n\n  const authHandler = {\n    authenticationRequired: async function(authenticator) {\n      console.log(\"Login request.\");\n    },\n    authenticationExpiringSoon: function(authenticator, secondsRemaining) {\n      console.log(`Auth token expiring in ${secondsRemaining} seconds`)\n    }\n  }\n\n  const identity = {\n    type: 'onlineWithAuthentication',\n    appID: 'REPLACE_ME_WITH_YOUR_APP_ID',\n    authHandler\n  }\n\n  const ditto = new Ditto(identity, '/persistence/file/path')\n  ditto.startSync()\n})()\n"))),(0,i.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'struct AuthDelegate: DittoAuthenticationDelegate {\n    func authenticationRequired(authenticator: DittoAuthenticator) {\n        print("Login request.")\n    }\n\n    func authenticationExpiringSoon(authenticator: DittoAuthenticator, secondsRemaining: Int64) {\n        print("Auth token expiring in \\(secondsRemaining)")\n    }\n}\n\nlet identity = DittoIdentity.onlineWithAuthentication(\n    appID: "REPLACE_ME_WITH_YOUR_APP_ID",\n    authenticationDelegate: AuthDelegate()\n)\n\nlet ditto = Ditto(identity: identity)\ntry! ditto.startSync()\n'))),(0,i.kt)(l.Z,{value:"objc",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc"},'@interface AuthDelegate : NSObject <DITAuthenticationDelegate>\n@end\n\n@implementation AuthDelegate\n- (void)authenticationRequired:(nonnull DITAuthenticator *)authenticator {\n      NSLog(@"Login request.");\n}\n\n- (void)authenticationExpiringSoon:(nonnull DITAuthenticator *)authenticator\n                  secondsRemaining:(int64_t)secondsRemaining {\n    NSLog(@"Auth token expiring in %lld seconds", secondsRemaining);\n}\n@end\n\nDITIdentity *identity = [[DITIdentity alloc] initOnlineWithAuthenticationWithAppID:@"REPLACE_ME_WITH_YOUR_APP_ID"\n                                                            authenticationDelegate:[[AuthDelegate alloc] init];\nDITDitto *ditto = [[DITDitto alloc] initWithIdentity:identity];\nNSError *error = nil;\n[ditto startSync:&error];\n'))),(0,i.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class AuthCallback: DittoAuthenticationCallback {\n    override fun authenticationRequired(authenticator: DittoAuthenticator) {\n        println("Login request.")\n    }\n\n    override fun authenticationExpiringSoon(\n        authenticator: DittoAuthenticator,\n        secondsRemaining: Long\n    ) {\n        println("Auth token expiring in $secondsRemaining seconds")\n    }\n}\n\nval androidDependencies = AndroidDittoDependencies(context)\nval identity = DittoIdentity.OnlineWithAuthentication(\n    androidDependencies,\n    "REPLACE_ME_WITH_YOUR_APP_ID",\n    AuthCallback()\n)\nval ditto = Ditto(androidDependencies, identity)\ntry {\n  ditto.startSync()\n} catch(e: DittoError) {\n  Log.e("Ditto error", e.message!!)\n}\n'))),(0,i.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\nclass AuthCallback implements DittoAuthenticationCallback {\n    @Override\n    public void authenticationRequired(@NonNull DittoAuthenticator authenticator) {\n        System.out.println("Login request.");\n    }\n\n    @Override\n    public void authenticationExpiringSoon(@NonNull DittoAuthenticator authenticator, long secondsRemaining) {\n        System.out.println("Auth token expiring in " + secondsRemaining + " seconds");\n    }\n}\n\nDittoDependencies androidDependencies = new DefaultAndroidDittoDependencies(this.context);\nDittoIdentity identity = new DittoIdentity.OnlineWithAuthentication(\n    customDirDependencies,\n    "REPLACE_ME_WITH_YOUR_APP_ID",\n    new AuthCallback()\n);\nDitto ditto = new Ditto(androidDependencies);\n\ntry {\n  ditto.startSync();\n} catch(DittoError e) {\n  Log.e("Ditto Error", e.getMessage())\n}\n'))),(0,i.kt)(l.Z,{value:"csharp",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'class AuthDelegate : IDittoAuthenticationDelegate\n{\n    public async void AuthenticationRequired(DittoAuthenticator authenticator)\n    {\n        System.Console.WriteLine($"Login request");\n    }\n\n    public async void AuthenticationExpiringSoon(DittoAuthenticator authenticator, long secondsRemaining)\n    {\n        System.Console.WriteLine($"Auth token expiring in {secondsRemaining} seconds");\n    }\n}\n\nvar identity = DittoIdentity.OnlineWithAuthentication(\n    "REPLACE_ME_WITH_YOUR_APP_ID",\n    new AuthDelegate());\n\ntry\n{\n    var ditto = new Ditto(identity);\n    ditto.StartSync();\n}\ncatch (DittoException ex)\n{\n    System.Console.WriteLine($"Ditto Error {ex.Message}");\n}\n'))),(0,i.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'class AuthCallback: public AuthenticationCallback {\npublic:\n  void authentication_required(std::shared_ptr<Authenticator> authenticator) {\n      std::cout << "Login request" << std::endl;\n  }\n\n  void authentication_expiring_soon(std::shared_ptr<Authenticator> authenticator,\n                                    std::int64_t seconds_remaining) {\n    std::cout << "Auth token expiring in " << seconds_remaining << " seconds" << std::endl;\n  }\n};\n\nIdentity identity = Identity::OnlineWithAuthentication(\n  "REPLACE_ME_WITH_YOUR_APP_ID",\n  std::make_shared<AuthCallback>()\n);\ntry {\n  Ditto ditto = Ditto(identity, "/your-persistence-path");\n  ditto.try_start_sync();\n} catch (const DittoError &err) {\n  std::cout << err.what() << std::endl;\n}\n'))),(0,i.kt)(l.Z,{value:"rust",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use dittolive_ditto::prelude::*;\nuse std::sync::Arc;\nuse std::time::Duration;\n\nstruct AuthHandler {\n    token: String,\n    provider: String,\n}\n\nimpl DittoAuthenticationEventHandler for AuthHandler {\n    fn authentication_required(&self, auth: dittolive_ditto::auth::DittoAuthenticator) {\n        ::log::info!("Login request.");\n    }\n\n    fn authentication_expiring_soon(\n        &self,\n        _auth: dittolive_ditto::auth::DittoAuthenticator,\n        seconds_remaining: std::time::Duration,\n    ) {\n        ::log::info!(\n            "Auth token expiring in {} seconds",\n            seconds_remaining.as_secs()\n        );\n    }\n}\n\nimpl Default for AuthHandler {\n    fn default() -> Self {\n        AuthHandler {\n            token: ThirdPartyAuth::get_token(),\n            provider: String::from("my-auth"),\n        }\n    }\n}\n\nlet mut ditto = Ditto::builder()\n    // creates a `ditto_data` folder in the directory containing the executing process\n    .with_root(Arc::new(PersistentRoot::current_exe()?))\n    .with_identity(|ditto_root| {\n      // Provided as an env var, may also be provided as hardcoded string\n      let app_id = AppId::from_env("DITTO_APP_ID")?;\n      let auth_event_handler = AuthHandler::default();\n      let enable_cloud_sync = true;\n      let custom_auth_url = None;\n      // return the Result<Identity, _> at the end of this closure\n      OnlineWithAuthentication::new(\n          ditto_root,\n          app_id,\n          auth_event_handler,\n          enable_cloud_sync,\n          custom_auth_url,\n      )\n    })\n    .with_transport_config(|_identity| {\n        let mut config = TransportConfig::enable_all_peer_to_peer()\n    })\n    .build()?;\n\nditto.try_start_sync()?;\n')))),(0,i.kt)("h3",{id:"login"},"Login"),(0,i.kt)("p",null,"Login takes two parameters: the first is ",(0,i.kt)("inlineCode",{parentName:"p"},"token"),". The token can be any string\nvalue. Most auth services use a ",(0,i.kt)("a",{parentName:"p",href:"https://jwt.io/"},"JWT (JSON Web Token)"),", but you\ncan send any token you want from the client.  For example, during testing you\nmay want to create a secret code for development\nuse. This string will be sent in a POST request to the HTTP route."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Sample Authentication Webhook Endpoint in the Portal",src:n(35554).Z})),(0,i.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let accessToken = await ThirdPartyAuth.getToken()\nawait ditto.auth.loginWithToken(accessToken, 'my-auth')\n"))),(0,i.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'ditto.auth.loginWithToken(ThirdPartyAuth.getToken(), provider: "my-auth") { err in\n    print("Login request completed. Error? \\(err)")\n}\n'))),(0,i.kt)(l.Z,{value:"objc",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc"},'[ditto auth loginWithToken:[ThirdPartyAuth getToken] provider:@"my-auth" completion:^(NSError * _Nullable err) {\n    NSLog(@"Login request completed. Error? %@", err);\n}];\n'))),(0,i.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'ditto.auth.loginWithToken(ThirdPartyAuth.getToken(), "my-auth") { err ->\n    println("Login request completed. Error? $err")\n}\n'))),(0,i.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'ditto.auth.loginWithToken(credentials.accessToken, "my-auth", err -> {\n    System.out.println("Login request completed. Error? " + err.toString());\n});\n'))),(0,i.kt)(l.Z,{value:"csharp",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var res = await authenticator.LoginWithToken(ThirdPartyAuth.GetToken(), "my-auth");\nSystem.Console.WriteLine($"Login request completed. Error? {res}");\n'))),(0,i.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'authenticator->login_with_token("123", "my-auth", [](std::unique_ptr<DittoError> err) {\n  std::cout << "Login request completed. Error?" << err->what() << std::endl;\n});\n'))),(0,i.kt)(l.Z,{value:"rust",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'auth.login_with_token(&self.token, &self.provider) {\n    ::log::info!("Login request completed. Error? {:?}", &e);\n}\n'))),(0,i.kt)(l.Z,{value:"http",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X DELETE 'https://{app_id}.cloud.ditto.live/api/v1/collections/people/documents/<doc_id>' \\\n  --header 'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==' \\\n  --header 'Content-Type: application/json' \n")))),(0,i.kt)("h3",{id:"logout"},"Logout"),(0,i.kt)("p",null,"Logout will stop sync, shut down all replication sessions, and remove any cached\nauthentication credentials. Note that this does not remove any data from the\nstore. If you wish to delete data from the store then use the optional\n",(0,i.kt)("inlineCode",{parentName:"p"},"cleanupFn")," parameter to perform any required cleanup."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"cleanupFn")," is an optional function that will be called with the relevant Ditto\ninstance as the sole argument that allows you to perform any required cleanup of\nthe store as part of the logout process."),(0,i.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"async function cleanupFn (ditto) {\n  await ditto.store.collection('cars').findAll().evict()\n}\nawait ditto.auth.logout(cleanupFn)\n"))),(0,i.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'ditto.auth.logout(cleanup: { ditto in\n    ditto.store.collection("cars").findAll().evict()\n})\n'))),(0,i.kt)(l.Z,{value:"objc",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc"},'[ditto.auth logout:^(DITDitto *ditto) {\n  DITCollection *collection = [ditto.store collection:@"cars"];\n  [[collection findAll] evict];\n}];\n'))),(0,i.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'ditto.auth.logout {\n  ditto.store["cars"].findAll().evict()\n}\n'))),(0,i.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},' ditto.auth.logout(ditto -> {\n  ditto.store.collection("cars").findAll().evict();\n })\n'))),(0,i.kt)(l.Z,{value:"csharp",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'ditto.Auth.Logout((Ditto ditto) =>\n{\n  ditto.Store.Collection("cars").FindAll().evict();\n});\n'))),(0,i.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'ditto.auth.logout({\n  ditto.store.collection("cars").findAll().evict();\n})\n'))),(0,i.kt)(l.Z,{value:"rust",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'ditto.auth.logout(|ditto| {\n  ditto.store().collection("cars")?.find_all().evict()?;\n});\n')))),(0,i.kt)("h2",{id:"tutorial"},"Tutorial"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"This section will require knowledge of writing server side HTTP endpoints and handlers.")," The server side sample code is written in JavaScript (NodeJS with an ",(0,i.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express"),"-like API), however you can use any framework or language of your choosing.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"We will use Auth0 in this tutorial.")," But you can use any third-party identity provider. Each app can use multiple identity providers. Identity providers can be: ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In this tutorial, you'll build a simple application so users can log in with a\na third-party provider using ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/"},"Auth0"),". We assume that you\nhave already completed the Auth0 tutorial on their documentation before starting\nthis tutorial. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For the full application code in JavaScript and Swift, see the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/getditto/samples/tree/master/authentication"},"code samples on\nGitHub"),"."))),(0,i.kt)("h3",{id:"server"},"Server"),(0,i.kt)("p",null,"The authentication webhook needs to handle an ",(0,i.kt)("strong",{parentName:"p"},"HTTP POST")," request. Each client\nthat will need to authenticate will send a payload to this webhook. The\nfollowing section requires that you have knowledge of writing server side HTTP\nendpoints and responding with a JSON payload. Code samples of server side code\nare written with a NodeJS / Express syntax. You can use any language or\nframework on the server side. "),(0,i.kt)("h4",{id:"incoming-post-body"},"Incoming POST body"),(0,i.kt)("p",null,"When your client device wants to authenticate using your webhook, your server will\nreceive an HTTP post with a JSON payload that looks like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "appID": "YOUR_APP_ID_HERE", // the appID\n  "provider": "my-auth", // this is the "Name" of the "Authentication Webhook"\n  "token": "eyJhbGciOiJI..." // this is what each device will send to authenticate\n}\n')),(0,i.kt)("p",null,"Your can introspect these values by parsing out the request body:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let express = require('express')\nlet cors = require('cors')\nlet body = require('body-parser')\nlet app = express()\n\napp.use(cors())\napp.use(body.json())\n\nlet app = express()\n\napp.post('/', (req, res) => {\n  const appID = req.body.appID\n  const provider = req.body.provider\n  const token = req.body.token\n})\n")),(0,i.kt)("p",null,"Generally, you will want to check the token for some sort of validity. Let's\nassume you have some sort of library or logic to parse and validate the token is\nfor a specific user. "),(0,i.kt)("p",null,"You can also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"userInfo")," key in your JSON response to\npass information back to client."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'app.post(\'/\', async (req, res) => {\n  const token = req.body.token;\n  try {\n    // The token that your server receives from ditto is always a string\n    let parsedToken = JSON.parse(token)\n    let payload = getDittoPermissions(parsedToken)\n    res.json(payload)\n  } catch (err) {\n    res.json({\n      "authenticate": err,\n      "userInfo": err.message\n    }) \n  }\n})\n')),(0,i.kt)("p",null,"As a simple example, let's grant full ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"write")," permissions to ",(0,i.kt)("em",{parentName:"p"},"all\ncollections")," and ",(0,i.kt)("em",{parentName:"p"},"all documents"),". "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'app.post(\'/\', async (req, res) => {\n  const token = req.body.token;\n  try {\n    let payload = {\n      "authenticate": true,\n      "expirationSeconds": 28800,\n      "userID": "123abc",\n      "permissions": {\n        "read": {\n          "everything": true,\n          "queriesByCollection": {}\n        },\n        "write": {\n          "everything": true,\n          "queriesByCollection": {}\n        }\n      }\n    }\n    res.json(payload)\n  } catch (err) {\n    res.json({\n      "authenticate": err,\n      "userInfo": err.message\n    }) \n  }\n})\n\n')),(0,i.kt)("p",null,"For more information on how to design your app's permissions, see ",(0,i.kt)("a",{parentName:"p",href:"./designing-permissions"},"Access Control\nPermissions"),"."),(0,i.kt)("h4",{id:"deploy-your-server"},"Deploy your server"),(0,i.kt)("p",null,"Now, the portal will attempt to reach this server. That means you must deploy it\nsomewhere that this HTTP request is accessible. For testing, you\ncan use a quick-deploy service such as ",(0,i.kt)("a",{parentName:"p",href:"https://glitch.com/"},"Glitch"),"."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Please be sure that this endpoint is not behind a firewall or VPN.  If you\ncannot get around this requirement ",(0,i.kt)("a",{parentName:"p",href:"mailto:support@ditto.live"},"contact us"),". "))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"app.listen(process.env.PORT, () => {\n  console.log('server listening on ', process.env.PORT)\n})\n")),(0,i.kt)("h4",{id:"configure-your-portal-app"},"Configure your Portal App"),(0,i.kt)("p",null,'To use an "Online With Authentication" identity, go to your app in the ',(0,i.kt)("a",{parentName:"p",href:"https://portal.ditto.live/"},"portal")," and find the ",(0,i.kt)("strong",{parentName:"p"},"Authentication Mode & Webhook Settings")," section. Ensure that ",(0,i.kt)("strong",{parentName:"p"},'"With Authentication"')," is selected like so:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Online With Authentication setting in Portal",src:n(60147).Z})),(0,i.kt)("p",null,"Below, a section called ",(0,i.kt)("strong",{parentName:"p"},"Authentication Webhooks")," will be editable. Once your Authentication Webhook Endpoint(s) is deployed and ready, you can register it in the portal. Add a ",(0,i.kt)("strong",{parentName:"p"},"Name")," and ",(0,i.kt)("strong",{parentName:"p"},"URL"),". "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("strong",{parentName:"li"},"Name")," is used the differentiate between multiple authentication. Most applications will have one authentication webhook, however the ",(0,i.kt)("strong",{parentName:"li"},"Name")," parameter is still required. This name value is important for the next section."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("strong",{parentName:"li"},"URL")," parameter is the fully qualified URL of the webhook that you deployed in the section above. Please include the protocol (",(0,i.kt)("em",{parentName:"li"},"https:// or http://")," though we highly discourage\n",(0,i.kt)("em",{parentName:"li"},"http://"),").")),(0,i.kt)("h3",{id:"client"},"Client"),(0,i.kt)("p",null,"To configure your client application, you must first add URL of the POST\nendpoint you created in the previous section."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Sample Authentication Webhook Endpoint in the Portal",src:n(35554).Z})),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The provider name given to the Ditto Client must match a provider name in the Portal (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"my-auth"),")."))),(0,i.kt)("p",null,"This tutorial assumes you've already configured your ",(0,i.kt)("inlineCode",{parentName:"p"},"auth0")," client from the\nofficial ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/"},"Auth0 documentation"),"."),(0,i.kt)("h4",{id:"login-1"},"Login"),(0,i.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,i.kt)("p",null,"Assuming you have a login button in the HTML:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<button onClick={login}>Login</button>\n")),(0,i.kt)("p",null,"We attach a ",(0,i.kt)("inlineCode",{parentName:"p"},"login")," function to the button."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import createAuth0Client from '@auth0/auth0-spa-js';\n// OR for React\nimport { useAuth0 } from '@auth0/auth0-react';\n\n// configure your auth0 client...\n\nasync function login () {\n  await auth0.loginWithRedirect({\n    redirect_uri: window.location.origin\n  });\n  startDitto()\n}\n")),(0,i.kt)("p",null,"We can then create a ",(0,i.kt)("inlineCode",{parentName:"p"},"startDitto")," function that gets the access token and starts a\nnew Ditto instance, and passes the token to your server route you created in the previous section."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import createAuth0Client from '@auth0/auth0-spa-js';\n// OR for React\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { init, Ditto } from \"@dittolive/ditto\"\n\n// configure your auth0 client...\n\nlet ditto\n\n(async () => {\n  await init() // you need to call this at least once before using any of the Ditto API\n\n  function startDitto () {\n    let token = await auth0.getAccessTokenSilently();\n\n    const authHandler = {\n      authenticationRequired: async function(authenticator) {\n        await authenticator.loginWithToken(token, \"my-auth\");\n        console.log(\"Login request completed.\");\n      },\n      authenticationExpiringSoon: function(authenticator, secondsRemaining) {\n        console.log(`Auth token expiring in ${secondsRemaining} seconds`)\n        await authenticator.loginWithToken(token, \"my-auth\");\n        console.log(\"Login request completed.\");\n      }\n    }\n\n    const identity = {\n      type: 'onlineWithAuthentication',\n      appID: 'REPLACE_ME_WITH_YOUR_APP_ID',\n      authHandler\n    }\n\n    ditto = new Ditto(identity, '/persistence/file/path')\n    ditto.startSync()\n  }\n\n  async function login () {\n    await auth0.loginWithRedirect({\n      redirect_uri: window.location.origin\n    });\n    startDitto()\n  }\n})()\n")),(0,i.kt)("p",null,"To demonstrate that this Ditto client has been authenticated, let's display the\nnumber of cars in the collection, and a button to add one item to it: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<div>\n  <h1>Cars: {numberOfCars}</h1>\n  <button onClick={addItem}>+1</button>\n</div>\n")),(0,i.kt)("p",null,"Once we start the ditto instance, we can create a ",(0,i.kt)("inlineCode",{parentName:"p"},"liveQuery")," and create a\nbutton that adds items to a collection:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let subscription = ditto.store.collection('cars').find(\"state == 'FOR_SALE'\").subscribe()\nlet liveQuery = ditto.store.collection('cars').find(\"name == 'Toyota'\").observeLocal((cars) => {\n  numberOfCars = cars.length\n})\n\nfunction addItem () {\n  ditto.store.collection('cars').upsert({\n    \"name\": 'Toyota',\n    \"state\": 'FOR_SALE'\n  })\n}\n"))),(0,i.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("p",null,"Assuming you have a login button in your SwiftUI ContentView, we want to create\na new ",(0,i.kt)("inlineCode",{parentName:"p"},"ObservedObject")," that we can subscribe to for updates to the\nauthentication status."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'class ProfileViewModel: ObservableObject {\n  // your authentication code will go here\n}\n\nstruct ContentView: View {\n    @ObservedObject var viewModel: ProfileViewModel = ProfileViewModel()\n\n    var body: some View {\n      Button("Login").padding()\n    }\n}\n')),(0,i.kt)("p",null,"We attach a login function to the button"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'class ProfileViewModel: ObservableObject {\n  // highlight-start\n  let credentialsManager = CredentialsManager(authentication: Auth0.authentication())\n\n  func login () {\n      Auth0\n          .webAuth()\n          .scope("openid profile")\n          .audience("https://ENTER_YOUR_SCOPE_URL_HERE.auth0.com/userinfo")\n          .start { result in\n              switch result {\n              case .success(let credentials):\n                  print("Obtained credentials: \\(credentials)")\n                  self.credentialsManager.store(credentials: credentials)\n                  self.startDitto()\n              case .failure(let error):\n                  print("Failed with: \\(error)")\n                  // Handle Error\n              }\n          }\n  }\n  // highlight-end\n}\n\nstruct ContentView: View {\n    @ObservedObject var viewModel: ProfileViewModel = ProfileViewModel()\n\n    var body: some View {\n      Button("Login", action: viewModel.login).padding()\n    }\n}\n')),(0,i.kt)("p",null,"We can then create a startDitto function that:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Gets the access token from Auth0;"),(0,i.kt)("li",{parentName:"ol"},"Starts the Ditto instance; and "),(0,i.kt)("li",{parentName:"ol"},"Creates a liveQuery")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'class ProfileViewModel: ObservableObject {\n  // highlight-next-line\n    @Published var ditto: Ditto?\n  // highlight-next-line\n    @Published var docs: [DittoDocument] = []\n    ....\n\n    func startDitto () {\n      // 1. Get the access token from Auth0\n      // highlight-start\n        credentialsManager.credentials { error, credentials in\n            guard error == nil, let credentials = credentials else {\n                // Handle error\n                return\n            }\n            \n            guard let accessToken = credentials.accessToken else {\n                // Handle Error\n                return\n            }\n            self.authDelegate = AuthDelegate(token: accessToken)\n          // highlight-end\n        \n            // 2. Start the Ditto instance \n            // highlight-start\n            let identity = DittoIdentity.onlineWithAuthentication(\n                appID: "YOUR_APP_ID_HERE",\n                authenticationDelegate: self.authDelegate\n            )\n\n            let ditto = Ditto(identity: identity)\n            try! ditto.startSync()\n            // highlight-end\n\n            // 3. Create a liveQuery \n            // highlight-start\n            self.ditto = ditto\n            let subscription = ditto.store.collection("cars").find("state == \'FOR_SALE\'").subscribe()\n            let liveQuery = ditto.store.collection("cars").find("name == \'Toyota\'").observeLocal { docs, event in\n                self.docs = docs\n            }\n            // highlight-end\n            \n        }\n    }\n}\n        \n')),(0,i.kt)("p",null,"To pass the token to your server route you created in the previous section, you\nneed to create an ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthDelegate")," class that is passed to the Ditto constructor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'class AuthDelegate: DittoAuthenticationDelegate {\n    var token: String\n    \n    init (token: String) {\n        self.token = token\n    }\n\n    func authenticationRequired(authenticator: DittoAuthenticator) {\n        authenticator.loginWithToken(self.token, provider: "my-auth") { err in\n            print("Login request completed. Error? \\(err)")\n        }\n    }\n\n    func authenticationExpiringSoon(authenticator: DittoAuthenticator, secondsRemaining: Int64) {\n        print("Auth token expiring in \\(secondsRemaining)")\n        authenticator.loginWithToken(self.token, provider: "my-auth") { err in\n            print("Login request completed. Error? \\(err)")\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Our ContentView can now display the number of cars, and you can add a button for\nadding an item to the database:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'\nstruct ContentView: View {\n    @ObservedObject var viewModel: ProfileViewModel = ProfileViewModel()\n    \n    var body: some View {\n          Button("Login", action: viewModel.login)\n              .padding()\n        }\n    \n        Text("Cars:" + String(viewModel.docs.count))\n        // Bonus points: implement addItem button using Ditto\'s `upsert`\n        Button("+1", viewModel.addItem)\n        \n    }\n}\n\n')))),(0,i.kt)("p",null,"To make this usable for real-world applications, you can retreieve the user's\nprofile details such as email, username, and full name. See the official Auth0\ndocumentation for your platform to add that functionality to your application"),(0,i.kt)("h4",{id:"logout-1"},"Logout"),(0,i.kt)("p",null,"First, we need some sort of way to monitor the state of the login flow. This\nallows us to display a Logout button when the user has already logged in."),(0,i.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let loggedIn = false\nif (auth0.isAuthenticated()) {\n  loggedIn = true\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"if (loggedIn) {\n  // render the logout button\n  <button onClick={onLogoutClick}>Logout</button>\n} else {\n  <button onClick={login}>Login</button>\n}\n")),(0,i.kt)("p",null,"And then we can write the logout function and attach it to the button."),(0,i.kt)("p",null,"We also recommend calling ",(0,i.kt)("inlineCode",{parentName:"p"},"ditto.auth.logout")," with a callback function that\nevicts any data from the local database. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function onLogoutClick() {\n  ditto.auth.logout(() => {\n    ditto.store.collection('cars').findAll().evict()\n  })\n  await auth0.logout({ returnTo: window.location.origin })\n}\n"))),(0,i.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'class ProfileViewModel: ObservableObject {\n  //highlight-start\n  @Published private(set) var state = State.isLoading\n\n  enum State {\n      case isLoading\n      case loaded(UserInfo)\n  }\n  //highlight-end\n\n}\n\nstruct ContentView: View {\n    @ObservedObject var viewModel: ProfileViewModel = ProfileViewModel()\n    \n    var body: some View {\n       \n        switch viewModel.state {\n          case .isLoading:\n              Button("Login", action: viewModel.login)\n          case .loaded(let user):\n              Text(user.name ?? "Anonymous Ditto User")\n              Button("Logout", action: viewModel.logout)\n          }\n    \n        Text("Cars:" + String(viewModel.docs.count))\n        \n    }\n}\n')),(0,i.kt)("p",null,"And then we can write the logout function and attach it to the button."),(0,i.kt)("p",null,"We also recommend calling ",(0,i.kt)("inlineCode",{parentName:"p"},"ditto.auth.logout")," with a callback function that\nevicts any data from the local database. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'class ProfileViewModel: ObservableObject {\n  ...\n  \n  func logout () {\n      Auth0\n          .webAuth()\n          .clearSession(federated: false) { result in\n              if result {\n                  if (self.ditto != nil) {\n                    // Clean up the cars collection after logout\n                    // highlight-start\n                      self.ditto!.auth?.logout(cleanup: { ditto in\n                          ditto.store.collection("cars").findAll().evict()\n                      })\n                    // highlight-end\n                  }\n                  self.state = State.isLoading\n              }\n          }\n  }\n  \n}\n\n')))),(0,i.kt)("p",null,"\ud83c\udf89 You now have a fully functioning ",(0,i.kt)("inlineCode",{parentName:"p"},"onlineWithAuthentication")," app. Build and\nrun it on a device."),(0,i.kt)("p",null,"For the full application code in React and iOS, see the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/getditto/samples/tree/master/authentication"},"code samples on GitHub"),"."))}m.isMDXComponent=!0},86010:(t,e,n)=>{"use strict";function a(t){var e,n,i="";if("string"==typeof t||"number"==typeof t)i+=t;else if("object"==typeof t)if(Array.isArray(t))for(e=0;e<t.length;e++)t[e]&&(n=a(t[e]))&&(i&&(i+=" "),i+=n);else for(e in t)t[e]&&(i&&(i+=" "),i+=e);return i}n.d(e,{Z:()=>i});const i=function(){for(var t,e,n=0,i="";n<arguments.length;)(t=arguments[n++])&&(e=a(t))&&(i&&(i+=" "),i+=e);return i}},46700:(t,e,n)=>{var a={"./af":42786,"./af.js":42786,"./ar":30867,"./ar-dz":14130,"./ar-dz.js":14130,"./ar-kw":96135,"./ar-kw.js":96135,"./ar-ly":56440,"./ar-ly.js":56440,"./ar-ma":47702,"./ar-ma.js":47702,"./ar-sa":16040,"./ar-sa.js":16040,"./ar-tn":37100,"./ar-tn.js":37100,"./ar.js":30867,"./az":31083,"./az.js":31083,"./be":9808,"./be.js":9808,"./bg":68338,"./bg.js":68338,"./bm":67438,"./bm.js":67438,"./bn":8905,"./bn-bd":76225,"./bn-bd.js":76225,"./bn.js":8905,"./bo":11560,"./bo.js":11560,"./br":1278,"./br.js":1278,"./bs":80622,"./bs.js":80622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":50877,"./cv.js":50877,"./cy":47373,"./cy.js":47373,"./da":24780,"./da.js":24780,"./de":59740,"./de-at":60217,"./de-at.js":60217,"./de-ch":60894,"./de-ch.js":60894,"./de.js":59740,"./dv":5300,"./dv.js":5300,"./el":50837,"./el.js":50837,"./en-au":78348,"./en-au.js":78348,"./en-ca":77925,"./en-ca.js":77925,"./en-gb":22243,"./en-gb.js":22243,"./en-ie":46436,"./en-ie.js":46436,"./en-il":47207,"./en-il.js":47207,"./en-in":44175,"./en-in.js":44175,"./en-nz":76319,"./en-nz.js":76319,"./en-sg":31662,"./en-sg.js":31662,"./eo":92915,"./eo.js":92915,"./es":55655,"./es-do":55251,"./es-do.js":55251,"./es-mx":96112,"./es-mx.js":96112,"./es-us":71146,"./es-us.js":71146,"./es.js":55655,"./et":5603,"./et.js":5603,"./eu":77763,"./eu.js":77763,"./fa":76959,"./fa.js":76959,"./fi":11897,"./fi.js":11897,"./fil":42549,"./fil.js":42549,"./fo":94694,"./fo.js":94694,"./fr":94470,"./fr-ca":63049,"./fr-ca.js":63049,"./fr-ch":52330,"./fr-ch.js":52330,"./fr.js":94470,"./fy":5044,"./fy.js":5044,"./ga":29295,"./ga.js":29295,"./gd":2101,"./gd.js":2101,"./gl":38794,"./gl.js":38794,"./gom-deva":27884,"./gom-deva.js":27884,"./gom-latn":23168,"./gom-latn.js":23168,"./gu":95349,"./gu.js":95349,"./he":24206,"./he.js":24206,"./hi":30094,"./hi.js":30094,"./hr":30316,"./hr.js":30316,"./hu":22138,"./hu.js":22138,"./hy-am":11423,"./hy-am.js":11423,"./id":29218,"./id.js":29218,"./is":90135,"./is.js":90135,"./it":90626,"./it-ch":10150,"./it-ch.js":10150,"./it.js":90626,"./ja":39183,"./ja.js":39183,"./jv":24286,"./jv.js":24286,"./ka":12105,"./ka.js":12105,"./kk":47772,"./kk.js":47772,"./km":18758,"./km.js":18758,"./kn":79282,"./kn.js":79282,"./ko":33730,"./ko.js":33730,"./ku":1408,"./ku.js":1408,"./ky":33291,"./ky.js":33291,"./lb":36841,"./lb.js":36841,"./lo":55466,"./lo.js":55466,"./lt":57010,"./lt.js":57010,"./lv":37595,"./lv.js":37595,"./me":39861,"./me.js":39861,"./mi":35493,"./mi.js":35493,"./mk":95966,"./mk.js":95966,"./ml":87341,"./ml.js":87341,"./mn":5115,"./mn.js":5115,"./mr":10370,"./mr.js":10370,"./ms":9847,"./ms-my":41237,"./ms-my.js":41237,"./ms.js":9847,"./mt":72126,"./mt.js":72126,"./my":56165,"./my.js":56165,"./nb":64924,"./nb.js":64924,"./ne":16744,"./ne.js":16744,"./nl":93901,"./nl-be":59814,"./nl-be.js":59814,"./nl.js":93901,"./nn":83877,"./nn.js":83877,"./oc-lnc":92135,"./oc-lnc.js":92135,"./pa-in":15858,"./pa-in.js":15858,"./pl":64495,"./pl.js":64495,"./pt":89520,"./pt-br":57971,"./pt-br.js":57971,"./pt.js":89520,"./ro":96459,"./ro.js":96459,"./ru":21793,"./ru.js":21793,"./sd":40950,"./sd.js":40950,"./se":10490,"./se.js":10490,"./si":90124,"./si.js":90124,"./sk":64249,"./sk.js":64249,"./sl":14985,"./sl.js":14985,"./sq":51104,"./sq.js":51104,"./sr":49131,"./sr-cyrl":79915,"./sr-cyrl.js":79915,"./sr.js":49131,"./ss":85893,"./ss.js":85893,"./sv":98760,"./sv.js":98760,"./sw":91172,"./sw.js":91172,"./ta":27333,"./ta.js":27333,"./te":23110,"./te.js":23110,"./tet":52095,"./tet.js":52095,"./tg":27321,"./tg.js":27321,"./th":9041,"./th.js":9041,"./tk":19005,"./tk.js":19005,"./tl-ph":75768,"./tl-ph.js":75768,"./tlh":89444,"./tlh.js":89444,"./tr":72397,"./tr.js":72397,"./tzl":28254,"./tzl.js":28254,"./tzm":51106,"./tzm-latn":30699,"./tzm-latn.js":30699,"./tzm.js":51106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":67691,"./uk.js":67691,"./ur":13795,"./ur.js":13795,"./uz":6791,"./uz-latn":60588,"./uz-latn.js":60588,"./uz.js":6791,"./vi":65666,"./vi.js":65666,"./x-pseudo":14378,"./x-pseudo.js":14378,"./yo":75805,"./yo.js":75805,"./zh-cn":83839,"./zh-cn.js":83839,"./zh-hk":55726,"./zh-hk.js":55726,"./zh-mo":99807,"./zh-mo.js":99807,"./zh-tw":74152,"./zh-tw.js":74152};function i(t){var e=o(t);return n(e)}function o(t){if(!n.o(a,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return a[t]}i.keys=function(){return Object.keys(a)},i.resolve=o,t.exports=i,i.id=46700},60147:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});const a=n.p+"assets/images/portal-with-authentication-setting-db905a14e187f9e15d460735da4712ad.png"},35554:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});const a=n.p+"assets/images/sample-authentication-webhook-endpoint-bcf6ba631bbd3e5b7a4d7f9fc802d2dc.png"}}]);