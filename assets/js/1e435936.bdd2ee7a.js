"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9201],{28994:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));n(8209);const o={},r="3.0 Migration guide",l={unversionedId:"v3",id:"v3",isDocsHomePage:!1,title:"3.0 Migration guide",description:"Ditto SDK 2.X.X Deprecation Notice",source:"@site/docs/common/v3.md",sourceDirName:".",slug:"/v3",permalink:"/common/v3",editUrl:"https://github.com/getditto/docs/edit/main/docs/common/v3.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"2.0 Migration Guide",permalink:"/common/v2"},next:{title:"4.0 Migration guide",permalink:"/common/v4"}},s=[{value:"Replicated Growable Array (RGA) is removed from the API",id:"replicated-growable-array-rga-is-removed-from-the-api",children:[],level:2},{value:"Observe will no longer implicitly create subscriptions",id:"observe-will-no-longer-implicitly-create-subscriptions",children:[],level:2},{value:"Swift changes",id:"swift-changes",children:[{value:"Removal of Codable Support in DittoSwift",id:"removal-of-codable-support-in-dittoswift",children:[],level:3}],level:2},{value:"Android changes",id:"android-changes",children:[],level:2}],d={toc:s},c="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"30-migration-guide"},"3.0 Migration guide"),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"Ditto SDK 2.X.X Deprecation Notice")),(0,i.kt)("p",{parentName:"div"},"On December 7, 2022, Ditto SDK Version 2.X.X is nearing end of life and will be deprecated. "),(0,i.kt)("p",{parentName:"div"},"On January 18, 2023, Ditto SDK Version 2.X.X will be unsupported.  Ditto SDK Version 2.X.X will no longer be able to synchronize with the Big Peer after January 18, 2023.  In order for applications to continue to synchronize with the Big Peer, your development teams are required to update and release a new version of your application that has been updated to Ditto SDK Version 3.0.X or higher prior to January 18, 2023.  "))),(0,i.kt)("p",null,"This is a migration guide that covers the most substantial\nchanges. For a comprehensive list of all deprecated and\nremoved methods, see the ",(0,i.kt)("a",{parentName:"p",href:"/changelog"},"changelog"),"."),(0,i.kt)("h2",{id:"replicated-growable-array-rga-is-removed-from-the-api"},"Replicated Growable Array (RGA) is removed from the API"),(0,i.kt)("p",null,"In v2, the Replicated Growable Array (RGA) was deprecated. In v3, they are\nentirely removed from the API. You'll still be able to read legacy RGA fields,\nbut not write to them."),(0,i.kt)("h2",{id:"observe-will-no-longer-implicitly-create-subscriptions"},"Observe will no longer implicitly create subscriptions"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"observe")," is now removed from the API. "),(0,i.kt)("p",null,"Instead, use ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribe")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"observeLocal")," together. If you\nhave ",(0,i.kt)("inlineCode",{parentName:"p"},".observe()")," double check that you are also subscribing to that data in an\napplication-wide Ditto manager object."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you want to sync something use ",(0,i.kt)("inlineCode",{parentName:"li"},".subscribe()"),". "),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"observeLocal")," to listen for changes and render documents in the user interface.")),(0,i.kt)("p",null,"For example, if you have this code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let liveQuery = collection.find(query).observe { (docs, event) in\n   ...\n}\n")),(0,i.kt)("p",null,"You need to now expand this to be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let subscription = collection.find(query).subscribe()\nlet liveQuery = collection.find(query).observeLocal { (docs, event) in\n   ...\n}\n")),(0,i.kt)("p",null,"Further, it is best practice to separate your subscribe functions from observe. "),(0,i.kt)("p",null,"For example, you should create a DittoManager singleton to hold subscribe calls:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'class DittoManager {\n\n    var ditto: Ditto\n    var subscription: DittoSubscription\n\n    static var shared = DittoManager()\n\n    init() {\n        self.ditto = Ditto(identity: .onlinePlayground(appID: "MY_APP", token: "MY_TOKEN"))\n        self.subscription = self.ditto.store["orders"].find(getOrdersQuery()).subscribe()\n    }\n\n    getOrdersQuery () {\n        return "restaurantId == \'\\(MyApp.restaurantId)\' && forScreen == \'\\(MyApp.deviceType)\'"\n    }\n}\n\n')),(0,i.kt)("p",null,"And use ",(0,i.kt)("inlineCode",{parentName:"p"},"observeLocal")," in your ViewModel to watch whenever the device's database is updated with changes. Both local and remote changes will fire this callback."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'class OrdersListViewModel: ObservableObject {\n    @Published var orders = [Order]()\n\n    init() {\n        self.liveQuery = DittoManager.shared.ditto.store["orders"]\n            .findAll()\n            .observeLocal(eventHandler: {  docs, event in\n                self.orders = docs.map({ Order(document: $0) })\n            }\n    }\n}\n')),(0,i.kt)("h2",{id:"swift-changes"},"Swift changes"),(0,i.kt)("h3",{id:"removal-of-codable-support-in-dittoswift"},"Removal of Codable Support in DittoSwift"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The current Codable Support in v1 forced magic types with no escape hatch. There was no way to customize the _id field to a struct or class\u2019s property name nor any ability to annotate that certain properties should behave like CRDTs. "),(0,i.kt)("li",{parentName:"ul"},"Ditto v3 deprecates native Codable support."),(0,i.kt)("li",{parentName:"ul"},"Native Codable support will be removed completely in v5, but there will be an alternative Codable implementation.")),(0,i.kt)("p",null,"If you have a struct or class that you want to map to a Document, please start\npopulating the fields using our document accessors explicitly.  This is verbose\nbut will prepare your code for the removal of Codable support from our core\nlibrary."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'class Car {\n    var id: String\n    var name: String\n    var mileage: Int\n\n    init(document: DittoDocument) {\n        self.id = document.id.stringValue\n        self.name = document["name"].register?.stringValue ?? ""\n        self.mileage = document["mileage"].register?.intValue ?? 0\n  }\n}\n')),(0,i.kt)("h2",{id:"android-changes"},"Android changes"),(0,i.kt)("p",null,"All instances of ID are now Id. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"findByID")," is now ",(0,i.kt)("inlineCode",{parentName:"p"},"findById"),". For the full list of deprecations, see the ",(0,i.kt)("a",{parentName:"p",href:"/changelog"},"changelog"),"."))}p.isMDXComponent=!0}}]);