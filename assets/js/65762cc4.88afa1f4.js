"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9341],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>k});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),s=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=s(t.components);return a.createElement(p.Provider,{value:e},t.children)},d="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),d=s(n),c=r,k=d["".concat(p,".").concat(c)]||d[c]||m[c]||l;return n?a.createElement(k,o(o({ref:e},u),{},{components:n})):a.createElement(k,o({ref:e},u))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i[d]="string"==typeof t?t:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},37081:(t,e,n)=>{n.r(e),n.d(e,{contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={title:"Installation",sidebar_position:7},o="Linux & Raspberry Pi",i={unversionedId:"installation",id:"installation",isDocsHomePage:!1,title:"Installation",description:"Ditto supports recent versions of Raspberry Pi and some other Linux-based systems",source:"@site/docs/linux/installation.mdx",sourceDirName:".",slug:"/installation",permalink:"/linux/installation",editUrl:"https://github.com/getditto/docs/tree/main/docs/linux/installation.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Installation",sidebar_position:7},sidebar:"docs",next:{title:"Overview",permalink:"/linux/common/concepts/overview"}},p=[{value:"Compatibility",id:"compatibility",children:[],level:2},{value:"Bluetooth Low Energy - BlueZ",id:"bluetooth-low-energy---bluez",children:[{value:"Add support for Linux to iOS connections.",id:"add-support-for-linux-to-ios-connections",children:[],level:3},{value:"Run the following command to set BlueZ&#39; support for multiple advertisements.",id:"run-the-following-command-to-set-bluez-support-for-multiple-advertisements",children:[],level:3},{value:"Next steps",id:"next-steps",children:[],level:3}],level:2}],s={toc:p},u="wrapper";function d(t){let{components:e,...n}=t;return(0,r.kt)(u,(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"linux--raspberry-pi"},"Linux & Raspberry Pi"),(0,r.kt)("p",null,"Ditto supports recent versions of Raspberry Pi and some other Linux-based systems"),(0,r.kt)("p",null,"These instructions are required to run Ditto on Linux regardless of the programming language. This applies to all SDKs, including\nJavaScript (Node/Electron), C#, C++, etc. "),(0,r.kt)("h2",{id:"compatibility"},"Compatibility"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"System"),(0,r.kt)("th",{parentName:"tr",align:null},"Support"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Linux x86 64-bit"),(0,r.kt)("td",{parentName:"tr",align:null},"Full support"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Raspberry Pi 4B 32-bit"),(0,r.kt)("td",{parentName:"tr",align:null},"Full support"),(0,r.kt)("td",{parentName:"tr",align:null},"Bullseye")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Raspberry Pi 3 32-bit"),(0,r.kt)("td",{parentName:"tr",align:null},"Full support"),(0,r.kt)("td",{parentName:"tr",align:null},"Bullseye")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Linux ARM 64-bit"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Linux SDK Language"),(0,r.kt)("th",{parentName:"tr",align:null},"Support"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Node.js"),(0,r.kt)("td",{parentName:"tr",align:null},"Full support")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Rust"),(0,r.kt)("td",{parentName:"tr",align:null},"Full support")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Python"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Network Transport"),(0,r.kt)("th",{parentName:"tr",align:null},"Linux Support"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Bluetooth Low Energy"),(0,r.kt)("td",{parentName:"tr",align:null},"Full support")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LAN / WLAN"),(0,r.kt)("td",{parentName:"tr",align:null},"Full support")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Websockets (Big Peer)"),(0,r.kt)("td",{parentName:"tr",align:null},"Full support")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Apple AWDL"),(0,r.kt)("td",{parentName:"tr",align:null},"No (iOS/Mac only)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Wifi Aware"),(0,r.kt)("td",{parentName:"tr",align:null},"No (Android only)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Wifi Direct"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h1",{id:"system-preparation-for-happy-ditto-operation"},"System preparation for happy Ditto operation"),(0,r.kt)("h2",{id:"bluetooth-low-energy---bluez"},"Bluetooth Low Energy - BlueZ"),(0,r.kt)("p",null,"If you would like to run Ditto on a Linux device and leverage Bluetooth Low\nEnergy please follow the instructions. "),(0,r.kt)("p",null,"Your device will need to install or update BlueZ with version 5.66 or higher.\nWe've outlined a quick snippet set of instructions below to install BlueZ 5.66 as an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install libdbus-1-dev libglib2.0-dev libudev-dev libical-dev libreadline-dev docutils-common -y\nwget http://www.kernel.org/pub/linux/bluetooth/bluez-5.66.tar.xz\ntar -xf bluez-5.66.tar.xz\ncd bluez-5.66\n./configure\nmake\nsudo make install\n")),(0,r.kt)("h3",{id:"add-support-for-linux-to-ios-connections"},"Add support for Linux to iOS connections."),(0,r.kt)("p",null,"BlueZ 5.51 and above try to automatically read the battery status/service of\ndevices when they connect. However, by default, iOS devices will prevent BlueZ\nservices from reading the battery service. As a result, BlueZ connection\nattempts will cause iOS devices to show a pairing prompt constantly. Therefore,\nwe will need to disable the battery service in BlueZ, using the following steps.  "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"With your favorite editor, open the bluetooth service file. On Raspberry Pi OS it's located: ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/systemd/system/bluetooth.service"),",\non other versions it may be here: ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/systemd/system/bluetooth.target.wants/bluetooth.service"),".",(0,r.kt)("br",{parentName:"p"}),"\n","You will probably need to use su permission to write to this file.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Find the line beginning with ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecStart=")," and add ",(0,r.kt)("inlineCode",{parentName:"p"},"-P battery")," to the end. Now the line should look like this:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ExecStart=/usr/lib/bluetooth/bluetoothd -P battery\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Save the file."),(0,r.kt)("li",{parentName:"ol"},"Run ",(0,r.kt)("inlineCode",{parentName:"li"},"sudo systemctl daemon-reload")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"sudo systemctl restart bluetooth")," to apply the changes to the Bluetooth service")),(0,r.kt)("p",null,"After that, BlueZ should be able to connect to iOS devices without prompting and\nDitto Apps should be able to communicate over BT-LE between iOS and Linux."),(0,r.kt)("h3",{id:"run-the-following-command-to-set-bluez-support-for-multiple-advertisements"},"Run the following command to set BlueZ' support for multiple advertisements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo setcap 'cap_net_raw,cap_net_admin+eip' `which hcitool` \n")),(0,r.kt)("p",null,"Your Linux system is now ready to install and run Ditto."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.ditto.live/javascript/installation"},"See here")," for Node.js SDK.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.ditto.live/rust/installation"},"See here")," for Rust SDK.",(0,r.kt)("br",{parentName:"p"}),"\n","The Python and C++ SDKs are in development. If you would like early access, please ",(0,r.kt)("a",{parentName:"p",href:"https://www.ditto.live/about/contact"},"contact us")),(0,r.kt)("h1",{id:"linux-demo-application-nodejs"},"Linux demo application (Node.js)"),(0,r.kt)("p",null,"Demo Ditto syncing from your Raspberry Pi to your iOS or Android device, over Bluetooth LE or WLAN using our Tasks App:"),(0,r.kt)("p",null,"1) Make sure you've gone though the steps to prepare your system (see above).\n2) Install Node Version Manager on your Pi.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash\n")),(0,r.kt)("p",null,"Now restart your terminal session so the changes can be picked up."),(0,r.kt)("p",null,"3) Install the LTS version of Node.js (v18.13) on your Pi.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"nvm install 18.13\n")),(0,r.kt)("p",null,"4) Clone the samples app repo to your machine.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git clone https://github.com/getditto/samples.git\ncd samples/tasks/nodejs/\n")),(0,r.kt)("p",null,"Edit the index.ts file to include your own test App ID and Token from ",(0,r.kt)("a",{parentName:"p",href:"https://portal.ditto.live"},"https://portal.ditto.live")),(0,r.kt)("p",null,"5) Run the demo app!.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install\nnpm run build\nnode index.js\n")),(0,r.kt)("p",null,"You should see this in your Pi's console:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'************* Commands *************\n--insert my new task\n   Inserts a task\n   Example: "--insert Get Milk"\n--toggle myTaskTd\n   Toggles the isComplete property to the opposite value\n   Example: "--toggle 1234abc"\n--delete myTaskTd\n   Deletes a task\n   Example: "--delete 1234abc"\n--list\n   List the current tasks\n--exit\n   Exits the program\n************* Commands *************\nYour command:\n')),(0,r.kt)("p",null,"6) Create a new task and then check to see it being updated in our ",(0,r.kt)("a",{parentName:"p",href:"https://portal.ditto.live"},"handy data browser"),".",(0,r.kt)("br",{parentName:"p"}),"\n","You'll need to log in and view the test app ID you created earlier.  "),(0,r.kt)("p",null,"7) Now build and run the Tasks app for iOS or Android.",(0,r.kt)("br",{parentName:"p"}),"\n","Be sure to reuse the same App ID and Token as you used on your Pi.",(0,r.kt)("br",{parentName:"p"}),"\n","iOS / Android examples are ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/getditto/samples/tree/main/tasks"},"here"),".  "),(0,r.kt)("h3",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.ditto.live/rust/common/concepts/overview"},"Learn more about how Ditto works")))}d.isMDXComponent=!0}}]);